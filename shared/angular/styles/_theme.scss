@use "variables";
@use "fonts";
@use '@angular/material' as mat;
@use 'palette' as palette;

@import "table";
@import 'loading-animation';

@tailwind base;
@tailwind components;
@tailwind utilities;

@include mat.core();

$theme-primary: mat.define-palette(palette.$primary-pat);
$theme-accent: mat.define-palette(palette.$accent-pat, A200, A100, A400);
$theme-warn: mat.define-palette(palette.$warn-pat);
$theme-typography: mat.define-typography-config(
  $font-family: theme("fontFamily.mono")
);


$light-theme: mat.define-light-theme((
  color: (
    primary: $theme-primary,
    accent: $theme-accent,
    warn: $theme-warn
  ),
  // Only include `typography` and `density` in the default theme.
  typography: $theme-typography,
  // https://m2.material.io/design/layout/applying-density.html#usage
  // between -3 and 0
  // density < -1 -> form field label not visible
  density: 0,
));

$dark-theme: mat.define-dark-theme((
  color: (
    primary: $theme-primary,
    accent: $theme-accent,
    warn: $theme-warn
  ),
));

// Emit theme-dependent styles for common features used across multiple components.
@include mat.core-theme($light-theme);

// Emit styles for MatButton based on `$light-theme`. Because the configuration
// passed to `define-light-theme` omits typography, `button-theme` will not
// emit any typography styles.
@include mat.all-component-themes($light-theme);
@include table-theme($light-theme);

@mixin define-utility-variables($theme) {
  $foreground: map-get($theme, foreground);
  $background: map-get($theme, background);
  $primary: map-get($theme, primary);
  $accent: map-get($theme, accent);
  $warn: map-get($theme, warn);
  $isDark: map-get($theme, is-dark);

  --background-color: #{map-get($background, background)};
  --primary-color: #{mat.get-color-from-palette($primary)};
  --accent-color: #{mat.get-color-from-palette($accent)};
  --warn-color: #{mat.get-color-from-palette($warn)};

  --hint-text-color: #{mat.get-color-from-palette($foreground, hint-text)};
  --foreground-color: #{mat.get-color-from-palette($foreground, base)};

  --accept-color: rgb(115, 190, 105);
  --decline-color: rgb(204, 73, 51);

}

@mixin body-theme($theme) {

  $background: mat.get-color-from-palette(map-get($theme, background), background);
  background-color: $background;
  color: mat.get-color-from-palette(map-get($theme, foreground), text);

  @include loadingAnimation($background);

}

:root {
  @include define-utility-variables($light-theme);
}

body.dark {
  @include mat.core-color($dark-theme);
  @include mat.all-component-colors($dark-theme);
  @include table-theme($dark-theme);
  @include define-utility-variables($dark-theme);
}

body {
  @include body-theme($light-theme);

  &.dark, &.dark-theme {
    @include body-theme($dark-theme);
  }

}
