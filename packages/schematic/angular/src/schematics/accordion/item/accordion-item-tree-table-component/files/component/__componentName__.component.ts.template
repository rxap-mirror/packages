import { ChangeDetectionStrategy, Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { throwIfEmpty } from '@rxap/rxjs';
<% if (hasSharedModifier) { %>
import { <%= classify(name) %>TreeTableComponent } from '<%= scope %>/shared/feature/<%= feature %>/<%= name %>-tree-table/<%= name %>-tree-table.component';
<% } else { %>
import { <%= classify(name) %>TreeTableComponent } from './<%= name %>-tree-table/<%= name %>-tree-table.component';
<% } %>

@Component({
  selector: '<%= prefix %>-<%= componentName %>',
  templateUrl: './<%= componentName %>.component.html',
  styleUrls: [ './<%= componentName %>.component.scss' ],
  changeDetection: ChangeDetectionStrategy.OnPush,
  standalone: true,
  imports: [
    <%= classify(name) %>TreeTableComponent,
  ],
})
export class <%= classify(componentName) %>Component {

  public readonly parameters$: Observable<{ uuid: string }>;

  constructor(private readonly route: ActivatedRoute) {
    this.parameters$ = this.route.params.pipe(
      map(({ uuid }) => uuid),
      throwIfEmpty('Could not extract the uuid from route'),
      map((uuid) => ({ uuid })),
    );
  }

}
