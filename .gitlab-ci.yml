image: node:lts

stages:
- build
- test
- publish

setup:
  stage: .pre
  tags:
  - build
  script: yarn --prefer-offline
  cache:
    key:
      files:
      - yarn.lock
    paths:
    - node_modules/

.yarn_cache: &yarn_cache
  cache:
    key:
      files:
      - yarn.lock
    paths:
    - node_modules/
    policy: pull

build:
  stage: build
  tags:
  - build
  needs:
  - setup
  script: yarn nx run-many --target=build --all --with-deps
  <<: *yarn_cache
  rules:
  - if: '$CI_COMMIT_TAG'
    when: never
  - when: on_success

test:
  stage: test
  tags:
  - build
  script: yarn nx run-many --target=test --all --with-deps
  needs:
  - setup
  <<: *yarn_cache
  rules:
  - if: '$CI_COMMIT_TAG'
    when: never
  - when: on_success
    allow_failure: true

.extract_project: &extract_project |
  PROJECT="$(echo $CI_COMMIT_TAG | cut -d'@' -f2 | cut -d'/' -f2)"
  echo "PROJECT=${PROJECT}"

.extract_project_root_path: &extract_project_root_path |
  PROJECT_ROOT="$(cat angular.json | jq --arg name $PROJECT -r '.projects[$name].root')"
  echo "PROJECT_ROOT=${PROJECT_ROOT}"

.extract_dist_path: &extract_dist_path |
  DIST_PATH="dist/${PROJECT_ROOT}"
  echo "DIST_PATH=${DIST_PATH}"

build:publish:
  stage: build
  tags:
  - build
  needs:
  - setup
  script:
  - *extract_project
  - yarn nx run ${PROJECT}:pack --with-deps
  <<: *yarn_cache
  artifacts:
    paths:
    - dist
    expire_in: 7 days
  rules:
  - if: '$CI_COMMIT_TAG =~ /.+@\d+\.\d+\.\d+/'
    when: on_success

test:publish:
  stage: test
  tags:
  - build
  needs:
  - setup
  <<: *yarn_cache
  coverage: '/Statements\s*:\s*(\d+\.?\d*)%/'
  artifacts:
    reports:
      junit: junit.xml
      cobertura: cobertura-coverage.xml
  script:
  - *extract_project
  - yarn nx run ${PROJECT}:test --ci --reporters=jest-junit --reporters=default --codeCoverage --coverageReporters cobertura --coverageReporters text-summary
  - *extract_project_root_path
  - cp "coverage/${PROJECT_ROOT}/cobertura-coverage.xml" cobertura-coverage.xml
  rules:
  - if: '$CI_COMMIT_TAG =~ /.+@\d+\.\d+\.\d+/'
    when: on_success
    allow_failure: true

.publish:
  stage: publish
  image: registry.gitlab.com/rxap/gitlab-ci/angular-build
  tags:
  - build
  dependencies:
  - build:publish
  rules:
  - if: '$CI_COMMIT_TAG =~ /.+@\d+\.\d+\.\d+/'
    when: on_success
    allow_failure: true
  variables:
    PACKAGE_ACCESS: public
  script:
  - echo "" > .npmrc
  - npm config set "@${CI_PROJECT_ROOT_NAMESPACE}:registry $PACKAGE_REGISTRY"
  - npm config set "${PACKAGE_REGISTRY#https?}:_authToken=${PACKAGE_REGISTRY_TOKEN}"
  - cat .npmrc
  - npm --version
  - npm ping --registry $PACKAGE_REGISTRY
  - npm whoami || true
  - *extract_project
  - *extract_project_root_path
  - *extract_dist_path
  - cd $DIST_PATH
  - npm publish --registry $PACKAGE_REGISTRY --access $PACKAGE_ACCESS

publish:npm:
  extends: .publish
  variables:
    PACKAGE_REGISTRY: https://registry.npmjs.org/
    PACKAGE_REGISTRY_TOKEN: "$NPM_TOKEN"

publish:rxap:
  extends: .publish
  variables:
    PACKAGE_REGISTRY: https://npm.rxap.dev/
    PACKAGE_REGISTRY_TOKEN: "$RXAP_NPM_TOKEN"

.check_gitlab_token: &check_gitlab_token |
  if [[ "${CI_JOB_TOKEN}" == *"-"* ]]; then
    echo "The CI_JOB_TOKEN contains a dash!!"
    exit 1
  fi

publish:gitlab:
  extends: .publish
  before_script:
  - *check_gitlab_token
  variables:
    PACKAGE_REGISTRY: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
    PACKAGE_REGISTRY_TOKEN: "$CI_JOB_TOKEN"
